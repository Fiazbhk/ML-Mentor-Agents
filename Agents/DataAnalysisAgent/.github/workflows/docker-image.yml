name: Docker Build and Push

on:
  push:
    branches:
      - main
      - develop
      - coral-integration
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  IMAGE_NAME: ml-mentor-data-analysis-agent
  REGISTRY: docker.io

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Check if Docker username is set
        if: github.event_name != 'pull_request'
        run: |
          if [ -z "${{ secrets.DOCKER_USERNAME }}" ]; then
            echo "ERROR: DOCKER_USERNAME secret is not set."
            echo "Please add DOCKER_USERNAME and DOCKER_PASSWORD secrets to your repository."
            exit 1
          else
            echo "✅ DOCKER_USERNAME is set: ${{ secrets.DOCKER_USERNAME }}"
          fi

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            # Set latest tag for default branch
            type=ref,event=branch
            type=ref,event=pr
            # Set version tags for releases
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            # Set latest tag for main branch
            type=raw,value=latest,enable={{is_default_branch}}
            # Set edge tag for develop branch
            type=raw,value=edge,enable=${{ github.ref == 'refs/heads/develop' }}
          labels: |
            org.opencontainers.image.title=ML Mentor DataAnalysisAgent
            org.opencontainers.image.description=Intelligent dataset analysis agent for machine learning workflows
            org.opencontainers.image.vendor=ML Mentor Team
            org.opencontainers.image.licenses=MIT
            org.coral.agent.name=DataAnalysisAgent
            org.coral.agent.version=1.0.0
            org.coral.agent.category=data-processing

      - name: Build Docker image (PR only)
        if: github.event_name == 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Docker image
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

      - name: Run Trivy vulnerability scanner
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Test Docker image
        if: github.event_name != 'pull_request'
        run: |
          echo "🧪 Testing Docker image..."
          
          # Start container in background
          docker run -d --name test-agent -p 8000:8000 \
            -e APP_ENV=test \
            -e DEBUG=false \
            ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          
          # Wait for container to start
          sleep 10
          
          # Test health endpoint
          echo "Testing health endpoint..."
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/health || echo "000")
          
          if [ "$response" = "200" ]; then
            echo "✅ Health check passed"
          else
            echo "❌ Health check failed with status: $response"
            docker logs test-agent
            exit 1
          fi
          
          # Test info endpoint
          echo "Testing info endpoint..."
          curl -s http://localhost:8000/info | jq . || echo "Info endpoint test failed"
          
          # Cleanup
          docker stop test-agent
          docker rm test-agent
          
          echo "✅ All tests passed!"

      - name: Update Docker Hub description
        if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
          readme-filepath: ./README.md

      - name: Generate deployment manifest
        if: github.event_name != 'pull_request'
        run: |
          mkdir -p deployment
          cat > deployment/docker-compose.yml << 'EOF'
          version: '3.8'
          services:
            data-analysis-agent:
              image: ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
              ports:
                - "8000:8000"
              environment:
                - APP_ENV=production
                - PORT=8000
                - DEBUG=false
                - CORAL_ENABLED=true
              volumes:
                - ./data:/app/data
                - ./logs:/app/logs
              restart: unless-stopped
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 40s
          EOF
          
          cat > deployment/kubernetes.yml << 'EOF'
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: data-analysis-agent
            labels:
              app: data-analysis-agent
              version: ${{ github.sha }}
          spec:
            replicas: 3
            selector:
              matchLabels:
                app: data-analysis-agent
            template:
              metadata:
                labels:
                  app: data-analysis-agent
              spec:
                containers:
                - name: agent
                  image: ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
                  ports:
                  - containerPort: 8000
                  env:
                  - name: APP_ENV
                    value: "production"
                  - name: PORT
                    value: "8000"
                  - name: CORAL_ENABLED
                    value: "true"
                  livenessProbe:
                    httpGet:
                      path: /health
                      port: 8000
                    initialDelaySeconds: 30
                    periodSeconds: 10
                  readinessProbe:
                    httpGet:
                      path: /health
                      port: 8000
                    initialDelaySeconds: 5
                    periodSeconds: 5
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: data-analysis-agent-service
          spec:
            selector:
              app: data-analysis-agent
            ports:
            - protocol: TCP
              port: 80
              targetPort: 8000
            type: LoadBalancer
          EOF

      - name: Upload deployment artifacts
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: deployment-manifests
          path: deployment/
          retention-days: 30

      - name: Create release on tag
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ## 🚀 DataAnalysisAgent Release ${{ github.ref }}
            
            ### Docker Image
            ```bash
            docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
            ```
            
            ### Quick Start
            ```bash
            docker run -p 8000:8000 ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
            ```
            
            ### Changes
            - See commit history for detailed changes
            
            ### Deployment
            - Docker Compose and Kubernetes manifests available in artifacts
            
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}

      - name: Notify deployment status
        if: always() && github.event_name != 'pull_request'
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "🎉 Docker image successfully built and pushed!"
            echo "📦 Image: ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest"
            echo "🔗 Docker Hub: https://hub.docker.com/r/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}"
          else
            echo "❌ Docker build and push failed!"
            exit 1
          fi